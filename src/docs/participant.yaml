tags:
  - name: participants
    description: Gestion des rameurs/rameuses et leurs informations

paths:
  /participants:
    get:
      tags: [participants]
      summary: Liste des participants
      responses:
        200:
          description: Liste renvoyée

    post:
      tags: [participants]
      summary: Créer un participant
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - first_name
                - last_name
                - license_number
                - gender
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                license_number:
                  type: string
                gender:
                  type: string
                  enum: [Homme, Femme]
                email:
                  type: string
                  format: email
                club_name:
                  type: string
      responses:
        201:
          description: Participant créé

  /participants/event/{event_id}:
    get:
      tags: [participants]
      summary: Liste des participants d’un événement
      security: [{ bearerAuth: [] }]
      parameters:
        - name: event_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID de l’événement
      responses:
        200:
          description: Liste des participants de l’événement
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Participant"

  /participants/{id}:
    get:
      tags: [participants]
      summary: Obtenir un participant par ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Détail du participant
        404:
          description: Participant non trouvé

    put:
      tags: [participants]
      summary: Modifier un participant
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                license_number:
                  type: string
                gender:
                  type: string
                  enum: [Homme, Femme]
                email:
                  type: string
                  format: email
                club_name:
                  type: string
      responses:
        200:
          description: Participant mis à jour

    delete:
      tags: [participants]
      summary: Supprimer un participant
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Participant supprimé

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Participant:
      type: object
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        license_number:
          type: string
        gender:
          type: string
        email:
          type: string
        club_name:
          type: string
